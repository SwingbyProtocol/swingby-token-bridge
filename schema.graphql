### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""A timestamp."""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime]
}

"""A number without precision limits."""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal]
  lt: Decimal
  lte: Decimal
  not: DecimalFilter
  notIn: [Decimal]
}

type Deposit {
  addressContract: String!
  addressFrom: String!
  addressTo: String!
  at: DateTime!
  blockNumber: Decimal!
  createdAt: DateTime!
  gas: Decimal!
  gasPrice: Decimal!
  hash: String!
  id: ID!
  network: Network!
  payments(after: PaymentWhereUniqueInput, before: PaymentWhereUniqueInput, first: Int, last: Int): [Payment!]!
  tokenDecimals: Int!
  transactionIndex: Int!
  updatedAt: DateTime!
  value: Decimal!
}

input DepositWhereInput {
  AND: [DepositWhereInput]
  NOT: [DepositWhereInput]
  OR: [DepositWhereInput]
  addressContract: StringFilter
  addressFrom: StringFilter
  addressTo: StringFilter
  at: DateTimeFilter
  blockNumber: DecimalFilter
  createdAt: DateTimeFilter
  gas: DecimalFilter
  gasPrice: DecimalFilter
  hash: StringFilter
  network: NetworkFilter
  tokenDecimals: IntFilter
  transactionIndex: IntFilter
  updatedAt: DateTimeFilter
  value: DecimalFilter
}

type DepositsConnection {
  edges: [DepositsConnectionEdges!]!
  pageInfo: ForwardPaginationPageInfo!
  totalCount: Int!
}

type DepositsConnectionEdges {
  cursor: String!
  node: Deposit!
}

type ForwardPaginationPageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int]
}

enum Network {
  BSC
  BSCT
  ETHEREUM
  GOERLI
}

input NetworkFilter {
  equals: Network
  in: [Network]
  not: NetworkFilter
  notIn: [Network]
}

type Payment {
  addressContract: String
  addressFrom: String
  addressTo: String
  at: DateTime
  blockNumber: Decimal
  createdAt: DateTime!
  deposit: Deposit!
  gas: Decimal
  gasPrice: Decimal
  hash: String!
  id: ID!
  network: Network!
  status: PaymentStatus!
  tokenDecimals: Int
  transactionIndex: Int
  updatedAt: DateTime!
  value: Decimal
}

input PaymentNetworkHashCompoundUniqueInput {
  hash: String!
  network: Network!
}

enum PaymentStatus {
  COMPLETED
  FAILED
  PENDING
}

input PaymentWhereUniqueInput {
  network_hash: PaymentNetworkHashCompoundUniqueInput
}

type Query {
  deposits(
    """
    Only items coming immediately after this will be returned. Can be combined with "first".
    """
    after: String

    """
    Only items coming immediately after this will be returned. Can be combined with "last".
    """
    before: String

    """
    Limits the number of items that are retuned. Can be combined with "after".
    """
    first: Int

    """
    Limits the number of items that are retuned. Can be combined with "before".
    """
    last: Int

    """Allows to filter results by several properties."""
    where: DepositWhereInput
  ): DepositsConnection!
  sanityCheck(network: Network!): Boolean!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: StringFilterMode
  not: StringFilter
  notIn: [String]
  startsWith: String
}

enum StringFilterMode {
  default
  insensitive
}
